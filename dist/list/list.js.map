{"version":3,"sources":["../../src/list/list.js"],"names":[],"mappings":"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","file":"list.js","sourcesContent":["'use strict'\n\nimport ListNode from './list-node'\n\nlet head = Symbol()\nlet tail = Symbol()\nlet size = Symbol()\n\nclass List {\n  constructor() {\n    this[head] = null\n    this[tail] = null\n    this[size] = 0\n  }\n\n  get size() {\n    return this[size]\n  }\n\n  prepend(element) {\n    let node = new ListNode(element)\n\n    this[size] += 1\n\n    if (this[head] === null) {\n      this[head] = node\n      return this\n    }\n\n    node.next = this[head]\n    this[head].previous = node\n\n    if (this[tail] === null) {\n      this[tail] = this[head]\n    }\n\n    this[head] = node\n\n    return this\n  }\n\n  append(element) {\n    let node = new ListNode(element)\n\n    this[size] += 1\n\n    if (this[head] === null) {\n      this[head] = node\n      return this\n    }\n\n    if (this[tail] === null) {\n      this[tail] = node\n      this[tail].previous = this[head]\n      this[head].next = this[tail]\n      return this\n    }\n\n    this[tail].next = node\n    node.previous = this[tail]\n    this[tail] = node\n\n    return this\n  }\n\n  first() {\n    return this[head].element\n  }\n\n  last() {\n    return this[tail].element\n  }\n\n  get(pos) {\n    if (pos >= this[size]) {\n      return\n    }\n\n    if (pos + 1 > this[size] / 2) {\n      return this.getFromTail(pos)\n    }\n\n    return this.getFromHead(pos)\n  }\n\n  getFromHead(pos) {\n    let cur = 0\n    let node = this[head]\n\n    while (cur < pos) {\n      node = node.next\n      cur++\n    }\n\n    return node.element\n  }\n\n  getFromTail(pos) {\n    let cur = this[size] - 1\n    let node = this[tail]\n\n    while (cur > pos) {\n      node = node.previous\n      cur--\n    }\n\n    return node.element\n  }\n\n  forEach(fn) {\n    let node = this[head]\n\n    while (node !== null) {\n      fn(node.element)\n      node = node.next\n    }\n  }\n}\n\nexport default List\n"]}